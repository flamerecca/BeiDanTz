version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker 
      - image: circleci/php:7.1-node-browsers # ...with this image as the primary container; this is where all `steps` will run
    working_directory: ~/code/BeiDanTz # directory where steps will run
    steps: # a set of executable commands
      - checkout # special step to check out source code to working directory
      - run: sudo apt install -y libsqlite3-dev zlib1g-dev libpng-dev
      - run: sudo docker-php-ext-install zip bcmath
      - run: sudo composer self-update
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - run: touch database/database.sqlite
      - run: php artisan migrate --env=testing
      - run: php artisan db:seed --env=testing
      - run:
          name: Run CS tests
          command: ./vendor/bin/phpcs --standard=psr2 app
      - run: ./vendor/bin/phpunit --coverage-clover=coverage.xml
      - run: bash <(curl -s https://codecov.io/bash)
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  deploy:
    docker:
      - image: cibuilds/aws:1.15.73
    steps:
      - attach_workspace:
          at: ~/code/BeiDanTz
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: check s3 bucket
          command: aws s3 ls
      - run:
          name: check currect dir
          command: pwd
      - run:
          name: Deploy to S3 if tests pass and branch is Master
          command: aws s3 sync . s3://beidantz-codedeploy --delete
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master